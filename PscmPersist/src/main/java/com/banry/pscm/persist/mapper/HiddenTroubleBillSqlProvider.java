package com.banry.pscm.persist.mapper;

import java.util.Map;

import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.jdbc.SQL;

import com.banry.pscm.service.engsafety.HiddenTroubleBill;

public class HiddenTroubleBillSqlProvider {

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table hidden_trouble_bill
	 * @mbg.generated  Fri Jun 15 11:21:07 CST 2018
	 */
	public String insertSelective(HiddenTroubleBill record) {
		SQL sql = new SQL();
		sql.INSERT_INTO("hidden_trouble_bill");
		if (record.getTroubleCode() != null) {
			sql.VALUES("trouble_code", "#{troubleCode,jdbcType=VARCHAR}");
		}
		if (record.getDivItemCode() != null) {
			sql.VALUES("div_item_code", "#{divItemCode,jdbcType=VARCHAR}");
		}
		if (record.getDivLevel() != null) {
			sql.VALUES("div_level", "#{divLevel,jdbcType=INTEGER}");
		}
		if (record.getTroubleCate() != null) {
			sql.VALUES("trouble_cate", "#{troubleCate.enumValue,jdbcType=INTEGER}");
		}
		if (record.getTroubleLevel() != null) {
			sql.VALUES("trouble_level", "#{troubleLevel.enumValue,jdbcType=INTEGER}");
		}
		if (record.getInvestItem() != null) {
			sql.VALUES("invest_item", "#{investItem,jdbcType=VARCHAR}");
		}
		if (record.getInvestContent() != null) {
			sql.VALUES("invest_content", "#{investContent,jdbcType=VARCHAR}");
		}
		if (record.getDescription() != null) {
			sql.VALUES("description", "#{description,jdbcType=VARCHAR}");
		}
		if (record.getTroubleFrom() != null) {
			sql.VALUES("trouble_from", "#{troubleFrom,jdbcType=VARCHAR}");
		}
		if (record.getFromCode() != null) {
			sql.VALUES("from_code", "#{fromCode,jdbcType=VARCHAR}");
		}
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table hidden_trouble_bill
	 * @mbg.generated  Fri Jun 15 11:21:07 CST 2018
	 */
	public String updateByPrimaryKeySelective(HiddenTroubleBill record) {
		SQL sql = new SQL();
		sql.UPDATE("hidden_trouble_bill");
		if (record.getDivItemCode() != null) {
			sql.SET("div_item_code = #{divItemCode,jdbcType=VARCHAR}");
		}
		if (record.getDivLevel() != null) {
			sql.SET("div_level = #{divLevel,jdbcType=INTEGER}");
		}
		if (record.getTroubleCate() != null) {
			sql.SET("trouble_cate = #{troubleCate.enumValue,jdbcType=INTEGER}");
		}
		if (record.getTroubleLevel() != null) {
			sql.SET("trouble_level = #{troubleLevel.enumValue,jdbcType=INTEGER}");
		}
		if (record.getInvestItem() != null) {
			sql.SET("invest_item = #{investItem,jdbcType=VARCHAR}");
		}
		if (record.getInvestContent() != null) {
			sql.SET("invest_content = #{investContent,jdbcType=VARCHAR}");
		}
		if (record.getDescription() != null) {
			sql.SET("description = #{description,jdbcType=VARCHAR}");
		}
		if (record.getTroubleFrom() != null) {
			sql.SET("trouble_from = #{troubleFrom,jdbcType=VARCHAR}");
		}
		if (record.getFromCode() != null) {
			sql.SET("from_code = #{fromCode,jdbcType=VARCHAR}");
		}
		sql.WHERE("trouble_code = #{troubleCode,jdbcType=VARCHAR}");
		return sql.toString();
	}
	
	
	public String selectBySqlWhere(@Param("sqlWhere") String sqlWhere, @Param("parent_tenant_code") String parent_tenant_code) {
		SQL sql = new SQL();
		sql.SELECT("a.*, '" + parent_tenant_code + "' parent_tenant_code");
		sql.FROM("hidden_trouble_bill a ");
		if (sqlWhere != null && !"".equals(sqlWhere)) {
			sql.WHERE(sqlWhere);
		}
		sql.ORDER_BY("a.trouble_cate, a.invest_item");
		return sql.toString();
	}
	
	
	public String selectTroubleCateInvestItem(@Param("sqlWhere") String sqlWhere, @Param("parent_tenant_code") String parent_tenant_code) {
		SQL sql = new SQL();
		sql.SELECT("a.trouble_cate, a.invest_item, '" + parent_tenant_code + "' parent_tenant_code");
		sql.FROM("hidden_trouble_bill a");
		if (sqlWhere != null && !"".equals(sqlWhere)) {
			sql.WHERE(sqlWhere);
		}
		sql.GROUP_BY("a.trouble_cate, a.invest_item");
		sql.ORDER_BY("a.trouble_cate, a.invest_item");
		return sql.toString();
	}
	
	public String selectOrderByRate(String divItemCode, String parent_tenant_code) {
		String sql = "select a.trouble_code, div_item_code, trouble_cate, invest_item, invest_content,  ifnull(c.rate,0) frequency, '" + parent_tenant_code + "' parent_tenant_code "
				+ "	from hidden_trouble_bill a "
				//最近一个月上报的频率
				+ "	join (select c.trouble_code, count(*) rate from hidden_trouble c where status<>1 and c.start_date >= date_add(DATE_FORMAT(now(),'%Y-%m-%d'),interval -30  day)"
				+ " group by trouble_code) c on a.trouble_code = c.trouble_code"
				+ " where FIND_IN_SET(div_item_code,getParentList('" + divItemCode + "'))"
				+ "	order by c.rate desc";
		return sql;
	}
	
	public String selectTroubleCateValue(Map<String,Object> map) {
		SQL sql = new SQL();
		sql.SELECT("enum_name, enum_value, enum_value_name, remark");
		sql.FROM("tenant_" + map.get("parent_tenant_code").toString() + ".enum_var");
		sql.WHERE("(enum_name = 'TroubleCate' or enum_name = 'TroubleCate1') and enum_value = '" + map.get("trouble_cate").toString() + "'");
		return sql.toString();
	}
	
	public String selectTroubleLevelValue(Map<String,Object> map) {
		SQL sql = new SQL();
		sql.SELECT("enum_name, enum_value, enum_value_name, remark");
		sql.FROM("tenant_" + map.get("parent_tenant_code").toString() + ".enum_var");
		sql.WHERE("enum_name = 'TroubleLevel' and enum_value = '" + map.get("trouble_level").toString() + "'");
		return sql.toString();
	}
	
	public String selectHiddenTroubleBillByMap(Map<String,Object> map) {
		SQL sql = new SQL();
		sql.SELECT("a.*, '" + map.get("parent_tenant_code") + "' parent_tenant_code");
		sql.FROM("hidden_trouble_bill a ");
		sql.WHERE("trouble_code = '" + map.get("trouble_bill_item_code") + "'");
		return sql.toString();
	}
	
	public String selectAllTroubleCate(String parentTenantCode) {
		SQL sql = new SQL();
		sql.SELECT("enum_name, enum_value, enum_value_name, remark");
		sql.FROM("tenant_" + parentTenantCode + ".enum_var");
		sql.WHERE(" enum_name = 'TroubleCate' or enum_name = 'TroubleCate1' ");
		return sql.toString();
	}
	
	public String selectAllTroubleLevel(String parentTenantCode) {
		SQL sql = new SQL();
		sql.SELECT("enum_name, enum_value, enum_value_name, remark");
		sql.FROM("tenant_" + parentTenantCode + ".enum_var");
		sql.WHERE(" enum_name = 'TroubleLevel' ");
		return sql.toString();
	}
	
	public String findEnumVarByEnumValueName(String enumValueName,String parentTenantCode) {
		SQL sql = new SQL();
		sql.SELECT("enum_name, enum_value, enum_value_name, remark");
		sql.FROM("tenant_" + parentTenantCode + ".enum_var");
		sql.WHERE(" enum_value_name = '" + enumValueName+"'");
		return sql.toString();
	}
	
}